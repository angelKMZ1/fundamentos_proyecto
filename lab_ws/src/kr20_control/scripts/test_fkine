#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
from markers import *
from lab5functions import *

if __name__ == '__main__':
    
    rospy.init_node("testForwardKine")
    pub = rospy.Publisher('joint_states', JointState, queue_size=10)
    bmarker = BallMarker(color['GREEN'])
    
    # Joint names
    jnames = ['base__link01',
              'link12__link01',
              'link01__link02', 
              'link02__link03', 
              'link03__link04', 
              'link04__link05', 
              'link05__gripper',
              'gripper__gripper_left',
              'gripper__gripper_right']
    
    # Probar diferentes configuraciones
    print("\nProbando configuración HOME:")
    q1 = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    T1 = fkine_kr20(q1)
    
    print("\nProbando brazo extendido:")
    q2 = np.array([0.0, 0.0, np.pi/2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    T2 = fkine_kr20(q2)
    
    print("\nProbando rotación de base:")
    q3 = np.array([np.pi/2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    T3 = fkine_kr20(q3)
    
    # Usar la configuración HOME para la visualización
    q = q2
    T = T2
    
    # Mostrar marcador
    bmarker.position(T)
    print("Transformada homogénea:")
    print(np.round(T, 3))
    print("\nPosición del efector final:")
    print(np.round(T[0:3,3], 3))
    
    # Mostrar marcador
    bmarker.position(T)
    
    # Mensaje para publicar
    jstate = JointState()
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    jstate.position = q
    
    # Loop rate (in Hz)
    rate = rospy.Rate(100)
    
    # Continuous execution loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Publish the message
        pub.publish(jstate)
        bmarker.publish()
        # Wait for the next iteration
        rate.sleep()